name: _Reusable deploy ecs task

on:
  workflow_call:
    inputs:
      app:
        required: true
        type: string
      stage:
        required: true
        type: string
      tests:
        required: true
        type: boolean

jobs:
  deploy:
    env:
      app: tasks-${{ inputs.app }}
      stack: ${{ vars.COMPANY_NAME }}-${{ inputs.stage }}-${{ inputs.app }}
    runs-on: ubuntu-latest
    steps:
      ##################################################################################################################
      ###                                             Basic action setup                                             ###
      ##################################################################################################################
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch || github.ref_name }}

      - uses: actions/setup-node@v3
        with:
          node-version: 18.12.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cache Node Modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      ##################################################################################################################
      ###                                               Build and Test                                               ###
      ##################################################################################################################

#      - name: Generate prisma client
#        run: npx nx generate:client prisma

      - name: Build ${{ env.app }}
        run: npx nx build ${{ env.app}} --skip-nx-cache

      - name: Test ${{ env.app }}
        if: ${{ inputs.tests }}
        run: npx nx test ${{ env.app}} --skip-nx-cache

      ##################################################################################################################
      ###                                              Deploy ecs tasks                                              ###
      ##################################################################################################################

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set ecr repository
        run: echo "ECR_REPOSITORY=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.stack }} \
          --query "Stacks[0].Outputs[?OutputKey=='RepositoryName'].OutputValue" \
          --output text)" >> "$GITHUB_ENV"

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f ./apps/${{ env.app }}/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "IMAGE_TAG=$IMAGE_TAG"



