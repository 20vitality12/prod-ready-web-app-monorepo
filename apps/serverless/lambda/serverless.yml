service: serverless-lambda

plugins:
  - 'serverless-bundle'
  - serverless-offline

package:
  individually: true

custom:
  COMPANY_NAME: monolith-it
  stage: ${opt:stage, env:STAGE, 'develop'}
  serverless-offline:
    httpPort: 3333
    lambdaPort: 2333
    noPrependStageInUrl: true
  bundle:
    linting: false
    tsConfig: 'tsconfig.app.json'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${self:custom.stage}
  endpointType: REGIONAL
  timeout: 20
  logRetentionInDays: 30
  environment:
    STAGE: ${self:custom.stage}
    NODE_OPTIONS: --enable-source-maps
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - ecs:RunTask
      Resource: "*"

functions:
  foo:
    handler: src/main.handler
    environment:
      TASK_DEFINITION_ARN: ${cf:${self:custom.COMPANY_NAME}-${self:custom.stage}-ecs-task.EcsTaskArn}
      ECS_CLUSTER_ARN: ${cf:${self:custom.COMPANY_NAME}-${self:custom.stage}-ecs-cluster.ClusterName}
      ECS_SECURITY_GROUPS: ${cf:${self:custom.COMPANY_NAME}-${self:custom.stage}-ecs-cluster.ECSSecurityGroupID}
      ECS_SUBNET_IDS: ${cf:${self:custom.COMPANY_NAME}-vpc.PublicSubnetIds}
    events:
      - http:
          method: GET
          path: /start-ecs-task
